import React, { useState} from 'react';
import { Modal, PG_Analysis, DG_Analysis, HD_Analysis, HW_Analysis } from './components';

import DiiLogo from './pictures/DII-LOGO.png'
import add_jng from './pictures/add.png'


import cli from './pictures/cli.png'
import './App.css';

const cli_array = [];



function App() {


  const [arch, setArch] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploaded, setUploaded] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [result, setResult] = useState(null);
  const [showResult, setShowResult] = useState(null);

  const [server_ip, setServer_ip] = useState("localhost:3001");
  const [cli_inf, setCli_inf] = useState(false);
  const [modalShow, setModalShow] = useState(false);
  const [showCLI, setShowCLI] = useState(false);

  const [target, setTarget] = useState("");
  const [nextCommand, setNextCommand] = useState("");


  const config_ipServer = () => {
    setServer_ip(document.getElementById('ip_server').value);

  }

  const config_nextCommand = () => {
    setNextCommand(document.getElementById('nextCommand').value);

  }
  const config_target = () => {
    setTarget(document.getElementById('target').value);

  }

  const SHOWconfig_TNC = () => {
    setCli_inf(`Client: Клиент DynamoRio выполнит : ${nextCommand} ${target}`)
    cli_array.push(`Client: Клиент DynamoRio выполнит : ${nextCommand} ${target}`);
    setShowCLI(true);
  }

  const SHOWconfig_ipServer = () => {
    setCli_inf(`Client: IP address сервера изменен : ${server_ip}`)
    cli_array.push(`Client: IP address сервера изменен : ${server_ip}`);
    setShowCLI(true);
  }

  const arch_x32 = () => {
    setArch('x32');
    cli_array.push(`Client: Выбрана разрядность х32`);
    setShowCLI(true);

  }

  const arch_x64 = () => {
    setArch('x64');
    cli_array.push(`Client: Выбрана разрядность х64`);
    setShowCLI(true);
  }


  const showCLIOpen = () => {
    setShowCLI(!showCLI);
  }

  const modalClose = () => {
    setModalShow({ number: 1, show: false });
  };

  function modalOpen(number_p) {
    setModalShow({ number: number_p, show: true });
    console.log(modalShow);
  };


  const handleChange = (event) => {
    console.log(event.target.files);
    setSelectedFile(event.target.files[0]);
    cli_array.push(`Client: Файл выбран`);

    setShowCLI(true);
  }

  const handleResult = async () => {
    if (!analysis) {
      setCli_inf("Client: Выполните анализ ВПО")
      cli_array.push("Client: Выполните анализ ВПО");
      setShowCLI(true);
      return;
    }
    setCli_inf(`Client: Отправлен запрос на получение результата...`)
    cli_array.push(`Client: Отправлен запрос на получение результата...`);
    const res = await fetch(`http://${server_ip}/execute`, {
      method: 'GET',
    });
    const data = await res.json();
    setResult(data.server);
    cli_array.push(`Client: Вывод результата анализа`);
    setShowCLI(true);
    console.log(result);
  }

  const handleShowResult = () => {
    setShowResult(!showResult);
    //  console.log(result);
    return;
  }

  const handleUpload = async () => {
    if (!selectedFile) {
      setCli_inf("Client: Выберите файл")
      cli_array.push("Client: Выберите файл");
      setShowCLI(true);
      return;
    }
    const formData = new FormData();
    formData.append('file', selectedFile);
    const res = await fetch(`http://${server_ip}/upload`, {
      method: 'POST',
      body: formData,
    });
    const data = await res.json();
    setUploaded(data);
    cli_array.push(`Client: Файл ${selectedFile.name} отправлен на сервер`);
    cli_array.push(data.server);
  }




  const handleAnalysis = async () => {
    if (!uploaded) {
      setCli_inf("Client: Отрпавьте файл на сервер")
      cli_array.push(`Client: Отрпавьте файл на сервер`);
      setShowCLI(true);
      return;
    }

    if (!arch) {
      setCli_inf("Client: Выберите разрядность")
      cli_array.push("Client: Выберите разрядность");
      setShowCLI(true);
      return;
    }
    setCli_inf("Client: На сервере производится анализ файла")
    cli_array.push('Client: На сервере производится анализ файла');

    const JSON_data = new FormData();
    JSON_data.append('fileName', selectedFile.name);
    JSON_data.append('arch', arch);
    JSON_data.append('target', target);
    JSON_data.append('nextCommand', nextCommand);

    const res = await fetch(`http://${server_ip}/execute`, {
      method: 'POST',
      body: JSON_data,
    });
    const data = await res.json();
    setAnalysis(data);
    cli_array.push(data.server);
    setShowCLI(true);

  }



  return (
    <>

      <div>
        <div id='main-1' className="main">

          <header>
            <img src={DiiLogo}></img>
          </header>
          <div className="main-container">
            <h1>Прототип системы поведенческого анализа ВПО на основе динамического бинарного инструментария DynamoRio</h1>
            <h3>
              <a className='main_a' onClick={() => modalOpen(0)}>о программе</a><span>|</span>
              <a className='main_a' onClick={() => modalOpen(1)}>об авторах</a><span>|</span>
              <a className='main_a' onClick={() => modalOpen(2)}>документация</a>
              <div>
                {modalShow.show && (<Modal props={modalClose} obj={modalShow} />)
                }

                <a id='button-1' className="btn third" href='#main-2'>Продолжить</a>
              </div>
            </h3>
          </div>


        </div>


        <div className='cli'>
          <img onClick={showCLIOpen} src={cli}></img>
          {showCLI && <div className='cli_window'>

            <ul>
              <span>Server`s IP/Port</span> <input id='ip_server' onChange={config_ipServer} placeholder={server_ip} type='text'></input>
              <button onClick={SHOWconfig_ipServer}>save</button>
              {cli_array && cli_array.map((obj) => (<li key={obj.id}>{obj}</li>))}

            </ul>
          </div>}
        </div>

        <div id='main-2' className="main-2">

          <a id='button-2' className="btn third" href='#main-1'>назад</a>
          <div className='config-result'>
            <div className='config'>
              <h2>Конфигурация</h2>
              <div className='conteiner-config'>

                <div className='arch'>
                  <div className="container">
                    <h3>Разрядность ВПО</h3>
                    <label htmlFor="radio-one" className="form-radio-hidden">
                      <input onClick={arch_x32} type="radio" name="demo" value="x32" id="radio-one" />
                      <span className="radio"></span>
                      <span className="text">x32</span>
                    </label>
                    <label htmlFor="radio-two" className="form-radio-hidden">
                      <input onClick={arch_x64} type="radio" name="demo" value="x64" id="radio-two" />
                      <span className="radio"></span>
                      <span className="text">x64</span>
                    </label>
                  </div>
                  <div className="container-command">
                    <span>Команда исполняемого приложения</span> <input id='nextCommand' onChange={config_nextCommand} placeholder={nextCommand} type='text'></input>
                    <span>Цель исполняемого приложения</span> <input id='target' onChange={config_target} placeholder={target} type='text'></input>
                    <button onClick={SHOWconfig_TNC}>сохранить</button>
                  </div>
                </div>

                <div className='center'>
                  <button onClick={handleUpload} className="btn third" >Отправить файл серверу</button>
                  <button onClick={handleAnalysis} className="btn third" >Выполнить анализ</button>
                  <button onClick={handleResult} className="btn third" >Получить результат</button>
                </div>

                <div className='fileManager'>
                  <div className="input__wrapper">
                    <input onChange={handleChange} name="file" type="file" id="input__file" className="input input__file" />
                    <label htmlFor="input__file" className="input__file-button">
                      <span className="input__file-icon-wrapper"><img className="input__file-icon" src={add_jng} alt="Выбрать файл" width="25" /></span>
                      <span className="input__file-button-text">Выберите вредоносный файл</span>
                    </label>
                  </div>

                  {selectedFile && (<ul>
                    <li>Последнее изменение: {selectedFile.lastModifiedDate.toLocaleDateString()}</li>
                    <li>Название: {selectedFile.name}</li>
                    <li>Размер: {selectedFile.size} байт</li>
                    <li>Тип: {selectedFile.name.split('.').pop()}</li>
                  </ul>)}
                </div>

              </div>

            </div>


            <div className='window_result_text'>
              <button onClick={handleShowResult} className="btn third" >Отобразить результат</button>
              {showResult && <div className='result_text'> <p>{result}</p> </div>}
            </div>

          </div>
          <div className='to_main-3'>
            <a href='#PG_Analysis' className="btn third" >Анализ полученных результатов</a>
          </div>


        </div>

        <PG_Analysis result={result} />
        <DG_Analysis result={result} />
        <HD_Analysis result={result} />
        <HW_Analysis result={result} />

        {/* <div className='progress-bar-div'>
          <div className='progress-bar'></div>
        </div> */}



      </div>

    </>

  );
}

export default App;
